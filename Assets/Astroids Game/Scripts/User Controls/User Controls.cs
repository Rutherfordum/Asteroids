//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Astroids Game/Scripts/User Controls/User Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""User Controls"",
    ""maps"": [
        {
            ""name"": ""Player action map"",
            ""id"": ""9bd909ab-93a6-4814-8490-2e54724f3143"",
            ""actions"": [
                {
                    ""name"": ""Move action"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e000c9f3-b912-4595-b8e2-4c4b38c5333d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot action"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5d51b98c-e982-4906-9262-555ce186c3f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""334bf042-9b81-4657-9577-96d7b5f8ebbe"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c9a4b9c7-db75-4d54-a033-a1737c64f2db"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9f7861e4-ec9a-4757-b0b8-95ae4c32d8bc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b6b32f25-397f-4864-a0ce-6435e8f6d29c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5ecded82-d68d-4bd8-94b3-dbbc42e8fb6b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow"",
                    ""id"": ""fd05bbf3-3287-4187-a6b8-07bf7a72e074"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e7a5cec5-ec6c-4838-b754-19132f883a39"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4a0173a0-70f9-4806-b8b3-e74ba4b15346"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""aff0f878-ba98-4295-a9d2-0b619655de5b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""66ce37e3-5098-499d-a9a9-d75e89394fb2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3f3e7fc6-1e5d-47d8-9cab-d0eb40881719"",
                    ""path"": ""<AndroidJoystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10f43803-94a6-429f-b092-a412a0538eb8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Shoot action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a618c25b-293b-4870-abb1-663e7fcf79dd"",
                    ""path"": ""<AndroidJoystick>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player action map
        m_Playeractionmap = asset.FindActionMap("Player action map", throwIfNotFound: true);
        m_Playeractionmap_Moveaction = m_Playeractionmap.FindAction("Move action", throwIfNotFound: true);
        m_Playeractionmap_Shootaction = m_Playeractionmap.FindAction("Shoot action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player action map
    private readonly InputActionMap m_Playeractionmap;
    private IPlayeractionmapActions m_PlayeractionmapActionsCallbackInterface;
    private readonly InputAction m_Playeractionmap_Moveaction;
    private readonly InputAction m_Playeractionmap_Shootaction;
    public struct PlayeractionmapActions
    {
        private @UserControls m_Wrapper;
        public PlayeractionmapActions(@UserControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moveaction => m_Wrapper.m_Playeractionmap_Moveaction;
        public InputAction @Shootaction => m_Wrapper.m_Playeractionmap_Shootaction;
        public InputActionMap Get() { return m_Wrapper.m_Playeractionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayeractionmapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayeractionmapActions instance)
        {
            if (m_Wrapper.m_PlayeractionmapActionsCallbackInterface != null)
            {
                @Moveaction.started -= m_Wrapper.m_PlayeractionmapActionsCallbackInterface.OnMoveaction;
                @Moveaction.performed -= m_Wrapper.m_PlayeractionmapActionsCallbackInterface.OnMoveaction;
                @Moveaction.canceled -= m_Wrapper.m_PlayeractionmapActionsCallbackInterface.OnMoveaction;
                @Shootaction.started -= m_Wrapper.m_PlayeractionmapActionsCallbackInterface.OnShootaction;
                @Shootaction.performed -= m_Wrapper.m_PlayeractionmapActionsCallbackInterface.OnShootaction;
                @Shootaction.canceled -= m_Wrapper.m_PlayeractionmapActionsCallbackInterface.OnShootaction;
            }
            m_Wrapper.m_PlayeractionmapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Moveaction.started += instance.OnMoveaction;
                @Moveaction.performed += instance.OnMoveaction;
                @Moveaction.canceled += instance.OnMoveaction;
                @Shootaction.started += instance.OnShootaction;
                @Shootaction.performed += instance.OnShootaction;
                @Shootaction.canceled += instance.OnShootaction;
            }
        }
    }
    public PlayeractionmapActions @Playeractionmap => new PlayeractionmapActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayeractionmapActions
    {
        void OnMoveaction(InputAction.CallbackContext context);
        void OnShootaction(InputAction.CallbackContext context);
    }
}
